{"version":3,"sources":["state/reducer.js","state/store.js","componets/rater/rater.js","App.js","serviceWorker.js","index.js"],"names":["initialState","skin","face","eyes","filter","sharp","other","commit","opts","report","action","keys","values","key","push","table","fields","datas","console","log","prepareReportData","fetch","headers","method","body","JSON","stringify","then","response","rep","json","data","rootReducer","state","type","store","createStore","desc","Rater","value","handleChange","setState","getState","props","name","dispatch","this","className","onChange","style","color","React","Component","TextArea","Input","App","id","rows","placeholder","shape","onClick","feeback","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa7e33d6.chunk.js","sourcesContent":["/**\n *  Create by kirawang 2019/10/30\n *  redux reducer \n */\nconst initialState = {\n  skin: \"0\",\n  face: \"0\",\n  eyes: \"0\",\n  filter: \"0\",\n  sharp: \"0\",\n  other: \"\"\n};\n\nfunction prepareReportData(opts) {\n    opts.action = 'anchor_quality_report';\n    var keys = [];\n    var values=[];\n    for(var key in opts){\n        keys.push(key);\n        values.push(opts[key]);\n    }\n    var report = {\n        table: 'xproxy_quality'\n    };\n    report.fields = keys;\n    report.datas = values;\n    console.log(report);\n    return report;\n}\n\nfunction commit(opts) {\n  let report = prepareReportData(opts);\n  fetch(\"http://now.qq.com/cgi-bin/now/web/tdw/report?a=1\", {\n    headers: {\n      \"Referer\": \"http://now.qq.com\",\n    },\n    method: \"post\",\n    body: JSON.stringify(report)\n  })\n    .then(function(response) {\n      const rep = response.json;\n      console.log(rep);\n      return rep;\n    })\n    .then(function(data) {});\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"scoreChange\":\n      console.log(action.data);\n      return action.data;\n    case \"commitAll\":\n      console.log(action.data);\n      commit(action.data);\n      return action.data;\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","/**\n *  Create by kirawang 2019/10/30\n *  redux store \n */\nimport { createStore } from 'redux';\nimport rootReducer from './reducer';\nconst store = createStore(rootReducer);\nexport default store;","import React from \"react\";\nimport store from '../../state/store';\nimport \"antd/dist/antd.css\";\nimport { Rate } from \"antd\";\nimport \"./rater.css\"\n/**\n *  Create by kirawang 2019/10/30\n *  星星评论组件\n */\nconst desc = [\"非常差\", \"差\", \"一般\", \"好\", \"非常好\"];\nclass Rater extends React.Component {\n  state = {\n    value: 0\n  };\n\n  handleChange = value => {\n    this.setState({ value }, ()=>{\n      const data = store.getState();\n      data[this.props.name]=value;\n      store.dispatch({ type: 'scoreChange',  data})\n    });\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <div>\n        <Rate className=\"star-rating\" onChange={this.handleChange} value={value} style={{ color: '#ffc107'}}/>\n        {value ? <div className=\"star-rating-text\">{desc[value - 1]}</div> : ''}\n      </div>\n    );\n  }\n}\nexport default Rater;\n","import React from 'react';\nimport \"antd/dist/antd.css\";\nimport Rater from \"./componets/rater/rater\";\nimport { Input } from \"antd\";\nimport { Button } from \"antd\";\nimport store from './state/store';\nimport \"./App.css\";\n/**\n *  Create by kirawang 2019/10/30\n *  页面布局\n */\nconst { TextArea } = Input;\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App\">\n        <div className=\"comment-content\">\n          <div className=\"beauty-title\">美颜评分</div>\n          <div className=\"beauty-score-content\">\n          <div className=\"beauty-score-item\">\n              <div className=\"beauty-score-title\">美肤</div>\n              <div className=\"beauty-score\">\n                <Rater name='skin'/>\n              </div>\n            </div>\n            <div className=\"beauty-score-item\">\n              <div className=\"beauty-score-title\">瘦脸</div>\n              <div className=\"beauty-score\">\n                <Rater name='face'/>\n              </div>\n            </div>\n            <div className=\"beauty-score-item\">\n              <div className=\"beauty-score-title\">大眼</div>\n              <div className=\"beauty-score\">\n                <Rater name='eyes'/>\n              </div>\n            </div>\n            <div className=\"beauty-score-item\">\n              <div className=\"beauty-score-title\">滤镜</div>\n              <div className=\"beauty-score\">\n                <Rater name='filter'/>\n              </div>\n            </div>\n          </div>\n          <hr className=\"split-line\" />\n          <div className=\"sharpness-content\">\n            <div className=\"sharpness-title\">清晰度评分</div>\n            <div className=\"beauty-score-item\">\n              <div className=\"beauty-score\">\n                <Rater name='sharp'/>\n              </div>\n            </div>\n            <TextArea\n              id=\"other-feedback\"\n              className=\"feedback-input\"\n              rows={4}\n              placeholder=\"其他建议\"\n            />\n          </div>\n          <Button className=\"commit-btn\" type=\"primary\" shape=\"round\" onClick={()=>{\n               const feeback=document.getElementById(\"other-feedback\").value;  \n               const data = store.getState();\n               data.other = feeback;\n               store.dispatch({ type: 'commitAll',  data})\n          }}>\n            提交评价\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}